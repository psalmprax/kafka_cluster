apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: kafka-cluster
  labels:
    app: zookeeper
spec:
  serviceName: zookeeper-headless
  replicas: 3 # Should match the number of server.X entries in zoo.cfg
  selector:
    matchLabels:
      app: zookeeper
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady # Ensures sequential startup, more stable for ZK
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      serviceAccountName: kafka-cluster-sa
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: keystore-truststore-init
          image: openjdk:11-jre-slim # Or your preferred image with keytool
          env:
            - name: ZK_SERVER_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: zookeeper-credentials
                  key: ZK_SERVER_KEYSTORE_PASSWORD
            - name: ZK_SERVER_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: zookeeper-credentials
                  key: ZK_SERVER_TRUSTSTORE_PASSWORD
          command:
            - "/bin/bash"
            - "-ecx"
            - |
              set -e
              echo "--- Starting Zookeeper InitContainer ---"
              SSL_DIR="/mnt/ssl-secrets"
              JKS_DIR="/mnt/ssl-jks"
              DATA_DIR="/var/lib/zookeeper/data"

              echo "Making directories and cleaning up previous runs..."
              mkdir -p ${JKS_DIR}
              rm -rf ${JKS_DIR}/*

              # --- JKS Generation ---
              KEYSTORE_PATH="${JKS_DIR}/zookeeper.server.keystore.jks" # Revert to JKS
              TRUSTSTORE_PATH="${JKS_DIR}/zookeeper.server.truststore.jks" # Truststore remains JKS
              echo "Creating full CA chain file for keystores and probes..."
              CHAIN_FILE="${JKS_DIR}/ca-chain.crt" # Create directly in shared volume
              cat "${SSL_DIR}/intermediate-ca/tls.crt" "${SSL_DIR}/root-ca/ca.crt" > "${CHAIN_FILE}" 2>&1 || { echo "ERROR: Failed to create CA chain file" && exit 1; }
              echo "Creating Zookeeper Server Keystore ${KEYSTORE_PATH}..."
              # Create a combined PEM file with server cert + intermediate + root
              SERVER_FULL_CHAIN_PEM="/tmp/zookeeper-server-full-chain.pem"
              cat "${SSL_DIR}/zookeeper-server-tls/tls.crt" "${SSL_DIR}/intermediate-ca/tls.crt" "${SSL_DIR}/root-ca/ca.crt" > "${SERVER_FULL_CHAIN_PEM}"
              # Create the final PKCS12 keystore directly from the full chain PEM
              # Create a temporary PKCS12 file first
              openssl pkcs12 -export -in "${SERVER_FULL_CHAIN_PEM}" -inkey "${SSL_DIR}/zookeeper-server-tls/tls.key" \
                -name zookeeper -out /tmp/zookeeper.server.temp.p12 \
                -password pass:"${ZK_SERVER_KEYSTORE_PASSWORD}" -passout pass:"${ZK_SERVER_KEYSTORE_PASSWORD}"
              echo "Creating Zookeeper Server Truststore ${TRUSTSTORE_PATH}..."
              # Convert the temporary PKCS12 to JKS
              keytool -importkeystore -srckeystore /tmp/zookeeper.server.temp.p12 -srcstoretype PKCS12 -srcstorepass "${ZK_SERVER_KEYSTORE_PASSWORD}" \
                -destkeystore "${KEYSTORE_PATH}" -deststoretype JKS -deststorepass "${ZK_SERVER_KEYSTORE_PASSWORD}" -destkeypass "${ZK_SERVER_KEYSTORE_PASSWORD}" -noprompt
              echo "Verifying JKS keystore..."
              CHAIN_LENGTH=$(keytool -list -v -keystore "${KEYSTORE_PATH}" -storepass "${ZK_SERVER_KEYSTORE_PASSWORD}" -noprompt | grep "Certificate chain length:" | awk '{print $NF}')
              if [ -z "${CHAIN_LENGTH}" ] || [ "${CHAIN_LENGTH}" -lt 3 ]; then # Expecting 3: server, intermediate, root
                echo "ERROR: JKS keystore chain length is ${CHAIN_LENGTH}, expected at least 3. Keystore verification failed!"
                exit 1
              fi
              keytool -list -v -keystore "${KEYSTORE_PATH}" -storepass "${ZK_SERVER_KEYSTORE_PASSWORD}" -noprompt || \
                (echo "ERROR: JKS keystore verification failed!" && exit 1)
              keytool -importcert -alias rootca -keystore ${TRUSTSTORE_PATH} \
                -file ${SSL_DIR}/root-ca/ca.crt \
                -storepass ${ZK_SERVER_TRUSTSTORE_PASSWORD} -noprompt
              keytool -importcert -alias intermediateca -keystore ${TRUSTSTORE_PATH} \
                -file ${SSL_DIR}/intermediate-ca/tls.crt \
                -storepass ${ZK_SERVER_TRUSTSTORE_PASSWORD} -noprompt

              echo "Setting permissions for Zookeeper user..." # This is an opportunity to show how permissions for files are set for Zookeeper
              chown -R 1000:1000 "${JKS_DIR}" "${DATA_DIR}"

              echo "--- Zookeeper InitContainer finished ---"
              ls -lR "${JKS_DIR}" "${DATA_DIR}"
          volumeMounts:
            - name: ssl-jks # Output volume for generated JKS files
              mountPath: /mnt/ssl-jks
            - name: zookeeper-data # Mount data dir to write the 'myid' file
              mountPath: /var/lib/zookeeper/data
            - name: zookeeper-server-tls-secret # ZK's own server cert/key
              mountPath: /mnt/ssl-secrets/zookeeper-server-tls
              readOnly: true
            - name: root-ca-secret
              mountPath: /mnt/ssl-secrets/root-ca
              readOnly: true
            - name: intermediate-ca-secret
              mountPath: /mnt/ssl-secrets/intermediate-ca
              readOnly: true
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.6.1 # Updated to a newer stable version
          # The command is removed to allow the default Confluent 'dub' entrypoint to run.
          # It will use the ZOOKEEPER_* env vars to generate the configuration.
          ports:
            - name: client-ssl
              containerPort: 2281 # secureClientPort
            - name: peer
              containerPort: 2888
            - name: leader-election
              containerPort: 3888
          env:
            - {name: ZOOKEEPER_CLIENT_PORT, value: "2181"} # Standard non-secure port, can be omitted if not used
            - {name: ZOOKEEPER_TICK_TIME, value: "2000"}
            - {name: ZOOKEEPER_INIT_LIMIT, value: "10"}
            - {name: ZOOKEEPER_SYNC_LIMIT, value: "5"}
            - {name: ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT, value: "3"}
            - {name: ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL, value: "1"}
            - {name: ZOOKEEPER_MAX_CLIENT_CNXNS, value: "60"}
            - {name: ZOOKEEPER_STANDALONE_ENABLED, value: "false"}
            - {name: ZOOKEEPER_ADMIN_ENABLE_SERVER, value: "true"}
            - {name: ZOOKEEPER_ADMIN_SERVER_PORT, value: "8080"}
            - {name: ZOOKEEPER_SECURE_CLIENT_PORT, value: "2281"}
            - {name: ZOOKEEPER_SERVER_CNXN_FACTORY, value: "org.apache.zookeeper.server.NettyServerCnxnFactory"}
            # Define Zookeeper ensemble members as environment variables for dub
            # This replaces the need for zookeeper.properties.template
            - {name: ZOOKEEPER_SERVER_1, value: "zookeeper-0.zookeeper-headless.kafka-cluster.svc.cluster.local:2888:3888"}
            - {name: ZOOKEEPER_SERVER_2, value: "zookeeper-1.zookeeper-headless.kafka-cluster.svc.cluster.local:2888:3888"}
            - {name: ZOOKEEPER_SERVER_3, value: "zookeeper-2.zookeeper-headless.kafka-cluster.svc.cluster.local:2888:3888"}
            - {name: ZOOKEEPER_DATA_DIR, value: "/var/lib/zookeeper/data"}
            - {name: ZOOKEEPER_DATA_LOG_DIR, value: "/var/lib/zookeeper/log"}
            - {name: ZOOKEEPER_SSL_CLIENT_AUTH, value: "need"}
            - {name: ZOOKEEPER_SSL_KEYSTORE_LOCATION, value: "/mnt/ssl-jks/zookeeper.server.keystore.jks"}
            - {name: ZOOKEEPER_SSL_KEYSTORE_TYPE, value: "JKS"}
            - name: ZOOKEEPER_SSL_KEYSTORE_PASSWORD
              valueFrom: {secretKeyRef: {name: zookeeper-credentials, key: ZK_SERVER_KEYSTORE_PASSWORD}}
            - {name: ZOOKEEPER_SSL_TRUSTSTORE_LOCATION, value: "/mnt/ssl-jks/zookeeper.server.truststore.jks"}
            - name: ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
              valueFrom: {secretKeyRef: {name: zookeeper-credentials, key: ZK_SERVER_TRUSTSTORE_PASSWORD}}
            - {name: ZOOKEEPER_SSL_ENABLED_PROTOCOLS, value: "TLSv1.2,TLSv1.3"}
            - {name: ZOOKEEPER_SSL_CIPHER_SUITES, value: "TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"}
          resources: # Add resource requests and limits
            requests:
              memory: "1Gi" # Example
              cpu: "500m" # Example
            limits:
              memory: "2Gi" # Example
              cpu: "1" # Example
          volumeMounts:
            - name: zookeeper-data
              mountPath: /var/lib/zookeeper/data
            - name: zookeeper-log # Separate log dir if desired, or combine with data
              mountPath: /var/lib/zookeeper/log
            - name: ssl-jks # Mount the JKS files prepared by initContainer, path matches ZOOKEEPER_SSL_*_LOCATION
              mountPath: /mnt/ssl-jks # Must match paths in zoo.cfg
              readOnly: true
            - name: intermediate-ca-secret # Mount for probe's -CAfile
              mountPath: /mnt/ssl-secrets/intermediate-ca # Must match path in probe
              readOnly: true
            - name: zookeeper-server-tls-secret # Mount for probe's client cert/key
              mountPath: /mnt/ssl-secrets/zookeeper-server-tls
              readOnly: true
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "openssl s_client -connect localhost:2281 -tls1_2 -cert /mnt/ssl-secrets/zookeeper-server-tls/tls.crt -key /mnt/ssl-secrets/zookeeper-server-tls/tls.key -CAfile /mnt/ssl-jks/ca-chain.crt -brief < /dev/null"
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "openssl s_client -connect localhost:2281 -tls1_2 -cert /mnt/ssl-secrets/zookeeper-server-tls/tls.crt -key /mnt/ssl-secrets/zookeeper-server-tls/tls.key -CAfile /mnt/ssl-jks/ca-chain.crt -brief < /dev/null"
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 15
      volumes:
        - name: ssl-jks # Shared volume for JKS files
          emptyDir: {}
        - name: zookeeper-server-tls-secret
          secret:
            secretName: zookeeper-tls # Cert for ZK server
        - name: root-ca-secret
          secret:
            secretName: root-ca-secret
        - name: intermediate-ca-secret
          secret:
            secretName: intermediate-ca-secret
  volumeClaimTemplates:
    - metadata:
        name: zookeeper-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: local-path # Or your chosen StorageClass (e.g., local-storage)
        resources:
          requests:
            storage: 10Gi # Adjust as needed
    - metadata:
        name: zookeeper-log
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: local-path # Or your chosen StorageClass
        resources:
          requests:
            storage: 5Gi # Adjust as needed